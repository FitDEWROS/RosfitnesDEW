(function () {
  const tg = window.Telegram?.WebApp || null;
  const qs = new URLSearchParams(location.search);
  const API_BASE = window.ENV?.API_BASE || "";

  const greetingEl  = document.getElementById('greeting');
  const tariffEl    = document.getElementById('tariff');
  const themeToggleBtn = document.getElementById("themeToggle"); // –∫–Ω–æ–ø–∫–∞-–ª–∞–º–ø–æ—á–∫–∞

  // –§–æ—Ä–º–∏—Ä—É–µ–º initData –¥–ª—è API
  function buildInitData() {
    const raw = tg?.initData || '';
    if (raw && raw.length > 0) return raw;

    const u = tg?.initDataUnsafe || null;
    if (!u || !u.hash) return '';

    const p = new URLSearchParams();
    if (u.query_id)      p.set('query_id', u.query_id);
    if (u.user)          p.set('user', JSON.stringify(u.user));
    if (u.auth_date)     p.set('auth_date', String(u.auth_date));
    if (u.start_param)   p.set('start_param', u.start_param);
    if (u.chat_type)     p.set('chat_type', u.chat_type);
    if (u.chat_instance) p.set('chat_instance', u.chat_instance);
    p.set('hash', u.hash);

    return p.toString();
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –ø–ª–∏—Ç–∫–∏
  async function fetchUserAndRender(initData) {
    try {
      const url = `${API_BASE}/api/user?initData=${encodeURIComponent(initData)}`;
      console.log("[api/user] ‚ûú", url);

      const res = await fetch(url);
      const json = await res.json().catch(() => ({}));

      console.log("[api/user] ‚¨Ö", json);

      if (!json?.ok) {
        console.warn("[api/user] ‚ö† –ù–µ—É–¥–∞—á–∞", json);
        return;
      }

      const name = json.profile?.first_name || json.user?.first_name || '–¥—Ä—É–≥';
      const tariff = json.profile?.tariffName || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

      greetingEl.textContent = `–ü—Ä–∏–≤–µ—Ç, ${name}!`;
      tariffEl.textContent = `–¢–∞—Ä–∏—Ñ: ${tariff}`;
      renderTilesByTariff(tariff);
    } catch (e) {
      console.error('[api/user] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞', e);
      tariffEl.textContent = "–¢–∞—Ä–∏—Ñ: –æ—à–∏–±–∫–∞";
    }
  }

  // –†–∏—Å—É–µ–º –ø–ª–∏—Ç–∫–∏ –ø–æ —Ç–∞—Ä–∏—Ñ—É
  function renderTilesByTariff(tariff) {
    const tiles = document.getElementById("tiles");
    if (!tiles) return;

    tiles.innerHTML = "";
    let actions = [];

    if (tariff === "–ë–∞–∑–æ–≤—ã–π") {
      actions = ["–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"];
    } else if (tariff === "–í—ã–≥–æ–¥–Ω—ã–π") {
      actions = ["–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", "–°–≤—è–∑—å —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º"];
    } else if (tariff === "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π") {
      actions = ["–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", "–°–≤—è–∑—å —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º"];
    } else {
      actions = ["–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"];
    }

    actions.forEach(label => {
      const tile = document.createElement("button");
      tile.className = "tile";
      tile.dataset.action = label;
      tile.innerHTML = `
        <div class="title">${label}</div>
        <div class="desc">–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</div>
      `;
      tile.addEventListener("click", () => showAlert(`¬´${label}¬ª ‚Äî —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`));
      tiles.appendChild(tile);
    });
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CSS –∏–∑ Telegram —Ç–µ–º—ã
  const setCSSFromTheme = (p = {}) => {
    const map = {
      '--bg':     p.bg_color,
      '--text':   p.text_color,
      '--card':   p.secondary_bg_color,
      '--card-2': p.section_bg_color,
    };
    for (const [k, v] of Object.entries(map)) {
      if (v) document.documentElement.style.setProperty(k, v);
    }
  };

  const showAlert = (msg) => (tg?.showAlert ? tg.showAlert(msg) : alert(msg));
  const waitReady = () => { try { tg?.ready?.(); } catch (_) {} };

  // -------------------------------
  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã üåô / ‚òÄÔ∏è
  // -------------------------------
  let isDark = true;

  function applyTheme() {
  clearInlineVars(); // ‚Üê –≤–∞–∂–Ω–æ
  if (isDark) {
    document.documentElement.classList.remove("light");
    themeToggleBtn.textContent = "üåô";
    localStorage.setItem("theme", "dark");
  } else {
    document.documentElement.classList.add("light");
    themeToggleBtn.textContent = "‚òÄÔ∏è";
    localStorage.setItem("theme", "light");
  }
}

  function clearInlineVars() {
  const r = document.documentElement;
  ['--bg','--text','--card','--card-border','--accent'].forEach(k => r.style.removeProperty(k));
}

  
  // —á–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ
const savedTheme = localStorage.getItem("theme");
if (savedTheme) {
  isDark = savedTheme === "dark";
} else if (tg) {
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±–∏—Ä–∞–ª —Ç–µ–º—É ‚Äî –ø–æ–¥—Ö–≤–∞—Ç–∏–º –ø–∞–ª–∏—Ç—Ä—É Telegram
  setCSSFromTheme(tg.themeParams || {});
}
applyTheme();


  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É
  if (themeToggleBtn) {
    themeToggleBtn.addEventListener("click", () => {
      isDark = !isDark;
      applyTheme();
    });
  }

  // -------------------------------
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  // -------------------------------
  async function init() {
    try {
      console.log(">>> INIT: –∑–∞–ø—É—Å–∫ WebApp");
      if (tg) {
        waitReady();
        tg.expand?.();
        setCSSFromTheme(tg.themeParams || {});
        const u = tg.initDataUnsafe?.user;
        if (u?.first_name) greetingEl.textContent = `–ü—Ä–∏–≤–µ—Ç, ${u.first_name}!`;
      }

      const qpTariff = qs.get('tariff');
      if (qpTariff) {
        tariffEl.textContent = `–¢–∞—Ä–∏—Ñ: ${qpTariff}`;
      }

      if (API_BASE && tg) {
        console.log(">>> API_BASE:", API_BASE);
        const initData = buildInitData();
        console.log(">>> initData:", initData);

        await fetch(`${API_BASE}/api/validate?initData=${encodeURIComponent(initData)}`).catch(() => ({}));
        await fetchUserAndRender(initData);
      } else {
        console.warn("‚ùå API_BASE –∏–ª–∏ Telegram WebApp –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã");
      }
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", e);
      showAlert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
  }

  // DEBUG EXPORTS
  window.API_BASE = API_BASE;
  window.tg = tg;
  window.buildInitData = buildInitData;

  console.log("tg.initData:", tg?.initData);
  console.log("tg.initDataUnsafe:", tg?.initDataUnsafe);

  init();
})();
