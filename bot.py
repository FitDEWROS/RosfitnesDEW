import os
import asyncio
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message
from aiogram.filters import CommandStart
from reg import router as reg_router, show_client_reg, db as reg_db, main_kb
from prisma import Prisma
from dotenv import load_dotenv
from pathlib import Path
from helpers import send_keep, send_temp
from keyboards import client_kb, app_inline_kb
from aiogram.fsm.context import FSMContext

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv(dotenv_path=Path(__file__).parent / ".env")
print("DEBUG .env BOT_TOKEN:", os.getenv("BOT_TOKEN"))

# Prisma engine –æ–±—â–∞–µ—Ç—Å—è –ø–æ localhost; –ø—Ä–æ–∫—Å–∏ –ª–æ–º–∞—é—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ‚Üí –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ª–æ–∫–∞–ª—Ö–æ—Å—Ç–∞
os.environ.setdefault("NO_PROXY", "127.0.0.1,localhost")
os.environ.setdefault("no_proxy", "127.0.0.1,localhost")
# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π –¥–≤–∏–∂–æ–∫
os.environ.setdefault("PRISMA_CLIENT_ENGINE_TYPE", "binary")

BOT_TOKEN = os.getenv("BOT_TOKEN")
db = Prisma()


async def on_start(message: Message):
    user = await reg_db.user.find_unique(where={"tg_id": message.from_user.id})
    if user:
        has_tariff = bool(user.tariffName)
        await send_temp(message, "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞.", reply_markup=client_kb(has_tariff))
        return
    await send_keep(message, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–¢—É—Ç –±—É–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º –∫—Ä—É—Ç–æ–π —Ç–µ–∫—Å—Ç üöÄ\n\n", reply_markup=main_kb())


async def on_client(message: Message, state: FSMContext):
    user = await reg_db.user.find_unique(where={"tg_id": message.from_user.id})
    if user:
        has_tariff = bool(user.tariffName)
        await send_temp(message, "–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞.", reply_markup=client_kb(has_tariff))
        return
    await show_client_reg(message, state)


async def on_about(message: Message):
    await message.answer("‚ÑπÔ∏è –¢—É—Ç –±—É–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º –∫—Ä—É—Ç–æ–π —Ç–µ–∫—Å—Ç –æ –±–æ—Ç–µ üöÄ")


async def send_app_button(message: Message):
    await message.answer(
        "–î–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=app_inline_kb()
    )


# –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Ç–µ–∫—Å—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏)
async def debug_all(message: Message):
    print("DEBUG TEXT:", repr(message.text))


async def main():
    if not BOT_TOKEN or "REPLACE_ME" in BOT_TOKEN:
        raise SystemExit("–ó–∞–ø–æ–ª–Ω–∏ BOT_TOKEN (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –≤ —Ñ–∞–π–ª–µ).")

    bot = Bot(BOT_TOKEN)
    dp = Dispatcher()

    # –†–æ—É—Ç–µ—Ä—ã
    from tariff_handlers import router as tariff_router
    dp.include_router(tariff_router)
    dp.include_router(reg_router)

    # –û–±—â–∏–π router –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    router = Router()
    router.message.register(on_start, CommandStart())
    router.message.register(on_client, F.text == "–ö–õ–ò–ï–ù–¢")
    router.message.register(on_about, F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
    # –•–µ–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏—è Reply-–∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    @router.message(F.text == "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    async def send_app_button(message: Message):
        await message.answer(
        "–î–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=app_inline_kb()
    )

    dp.include_router(router)

    await reg_db.connect(timeout=20)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    asyncio.run(main())
